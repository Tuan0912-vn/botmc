const mineflayer = require('mineflayer');
const Vec3 = require('vec3');
const express = require('express');
const app = express();

app.get('/', (req, res) => res.send("‚úÖ Bot ƒëang ch·∫°y..."));
app.listen(3000, () => console.log("üåê Web server online."));

function createBot() {
  const bot = mineflayer.createBot({
    host: "ntkzenz.aternos.me",
    port: 59277,
    username: "AFK_Bot",
    version: false
  });

  bot.on('spawn', () => {
    console.log("‚úÖ Bot ƒë√£ v√†o server!");
    let sleeping = false;

    bot.on('sleep', () => {
      console.log("üõå Bot b·∫Øt ƒë·∫ßu ng·ªß.");
      sleeping = true;
    });

    bot.on('wake', () => {
      console.log("‚è∞ Bot ƒë√£ d·∫≠y.");
      sleeping = false;
    });

    function checkSleep() {
      // S·ª≠ d·ª•ng timeOfDay ƒë·ªÉ check ch√≠nh x√°c h∆°n (0-24000)
      const timeOfDay = bot.time.timeOfDay;

      // X√°c ƒë·ªãnh ban ƒë√™m: th·ªùi gian t·ª´ 13000 t·ªõi 23000 l√† ƒë√™m trong Minecraft
      const isNight = timeOfDay >= 13000 && timeOfDay <= 23000;

      console.log(`üïì Th·ªùi gian trong game: ${timeOfDay} | Ban ƒë√™m? ${isNight} | Bot ƒëang ng·ªß? ${sleeping}`);

      const bedBlock = bot.blockAt(new Vec3(999999, 100, 999999));

      if (isNight) {
        if (bedBlock && bedBlock.name.includes('bed') && !sleeping) {
          console.log(`üõèÔ∏è Gi∆∞·ªùng ƒë∆∞·ª£c t√¨m th·∫•y: ${bedBlock.name}`);
          bot.sleep(bedBlock, (err) => {
            if (err) {
              console.log(`‚ùó Kh√¥ng th·ªÉ ng·ªß: ${err.message}`);
            } else {
              bot.chat("üí§ ƒêang ng·ªß th√¥i...");
            }
          });
        } else {
          console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi∆∞·ªùng ho·∫∑c bot ƒë√£ ng·ªß.");
        }
      } else {
        if (sleeping) {
          bot.wake();
          bot.chat("üåû Th·ª©c d·∫≠y r·ªìi!");
        } else {
          // Nh·∫£y nh·∫π ch·ªëng AFK
          bot.setControlState('jump', true);
          setTimeout(() => bot.setControlState('jump', false), 300);
          console.log("‚¨ÜÔ∏è Nh·∫£y ban ng√†y...");
        }
      }
    }

    setInterval(checkSleep, 10000);
  });

  bot.on('end', () => {
    console.log("‚ùå Bot b·ªã disconnect, ƒëang reconnect...");
    setTimeout(createBot, 5000);
  });

  bot.on('error', (err) => {
    console.log(`‚ùó L·ªói: ${err}`);
  });
}

createBot();
